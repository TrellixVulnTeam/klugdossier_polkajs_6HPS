/// <reference types="node" />
import { BoundPorts } from "./bound-ports";
import { Container, Id as ContainerId, InspectResult } from "./container";
import { AuthConfig, BindMode, BindMount, BuildContext, Command, ContainerName, Dir, DockerClient, Env, EnvKey, EnvValue, ExecResult, HealthCheck, NetworkMode, TmpFs } from "./docker-client";
import { Host } from "./docker-client-instance";
import { Port } from "./port";
import { PullPolicy } from "./pull-policy";
import { Image, Tag } from "./repo-tag";
import { StartedTestContainer, StopOptions, StoppedTestContainer, TestContainer } from "./test-container";
import { Uuid } from "./uuid";
import { WaitStrategy } from "./wait-strategy";
import { Readable } from "stream";
export declare class GenericContainerBuilder {
    private readonly context;
    private readonly dockerfileName;
    private readonly uuid;
    private buildArgs;
    constructor(context: BuildContext, dockerfileName: string, uuid?: Uuid);
    withBuildArg(key: string, value: string): GenericContainerBuilder;
    build(): Promise<GenericContainer>;
}
export declare class GenericContainer implements TestContainer {
    readonly image: Image;
    readonly tag: Tag;
    static fromDockerfile(context: BuildContext, dockerfileName?: string): GenericContainerBuilder;
    private readonly repoTag;
    protected env: Env;
    protected networkMode?: NetworkMode;
    protected ports: Port[];
    protected cmd: Command[];
    protected bindMounts: BindMount[];
    protected name?: ContainerName;
    protected tmpFs: TmpFs;
    protected healthCheck?: HealthCheck;
    protected waitStrategy?: WaitStrategy;
    protected startupTimeout: number;
    protected useDefaultLogDriver: boolean;
    protected privilegedMode: boolean;
    protected daemonMode: boolean;
    protected authConfig?: AuthConfig;
    protected pullPolicy: PullPolicy;
    private extraHosts;
    constructor(image: Image, tag?: Tag);
    start(): Promise<StartedTestContainer>;
    withAuthentication(authConfig: AuthConfig): this;
    withCmd(cmd: Command[]): this;
    withName(name: ContainerName): this;
    withEnv(key: EnvKey, value: EnvValue): this;
    withTmpFs(tmpFs: TmpFs): this;
    withNetworkMode(networkMode: NetworkMode): this;
    withExposedPorts(...ports: Port[]): this;
    withBindMount(source: Dir, target: Dir, bindMode?: BindMode): this;
    withHealthCheck(healthCheck: HealthCheck): this;
    withStartupTimeout(startupTimeout: number): this;
    withWaitStrategy(waitStrategy: WaitStrategy): this;
    withDefaultLogDriver(): this;
    withPrivilegedMode(): this;
    withPullPolicy(pullPolicy: PullPolicy): this;
    withDaemonMode(): this;
    isImageCached(dockerClient: DockerClient): Promise<boolean>;
    protected preCreate?(dockerClient: DockerClient, boundPorts: BoundPorts): Promise<void>;
    private waitForContainer;
    private getWaitStrategy;
}
export declare class StartedGenericContainer implements StartedTestContainer {
    private readonly container;
    private readonly host;
    private readonly inspectResult;
    private readonly boundPorts;
    private readonly name;
    private readonly dockerClient;
    constructor(container: Container, host: Host, inspectResult: InspectResult, boundPorts: BoundPorts, name: ContainerName, dockerClient: DockerClient);
    stop(options?: Partial<StopOptions>): Promise<StoppedTestContainer>;
    private stopContainer;
    getHost(): Host;
    getMappedPort(port: Port): Port;
    getId(): ContainerId;
    getName(): ContainerName;
    getNetworkNames(): string[];
    getNetworkId(networkName: string): string;
    getIpAddress(networkName: string): string;
    exec(command: Command[]): Promise<ExecResult>;
    logs(): Promise<Readable>;
}
