import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { SubmittableResult } from '@polkadot/api';
import { isUndefined, stringCamelCase } from '@polkadot/util';
import { applyOnEvent } from "../util.js";
import { Base } from "./Base.js";
import { Contract } from "./Contract.js";
import { createBluePrintTx, createBluePrintWithId, EMPTY_SALT, encodeSalt } from "./util.js";
export class BlueprintSubmittableResult extends SubmittableResult {
  constructor(result, contract) {
    super(result);
    this.contract = void 0;
    this.contract = contract;
  }

}

var _tx = _classPrivateFieldLooseKey("tx");

var _deploy = _classPrivateFieldLooseKey("deploy");

export class Blueprint extends Base {
  /**
   * @description The on-chain code hash for this blueprint
   */

  /**
   * @deprecated
   * @description Deprecated. Use `.tx.<constructorName>`. Creates a contract in a non-deterministic way.
   */
  constructor(api, abi, codeHash, decorateMethod) {
    super(api, abi, decorateMethod);
    this.codeHash = void 0;
    this.createContract = void 0;
    Object.defineProperty(this, _tx, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _deploy, {
      writable: true,
      value: (constructorOrId, {
        gasLimit = 0,
        salt,
        value = 0
      }, params) => {
        const encodedSalt = encodeSalt(salt);
        const withSalt = this.api.tx.contracts.instantiate.meta.args.length === 5;
        const encoded = this.abi.findConstructor(constructorOrId).toU8a(params, withSalt ? EMPTY_SALT : encodedSalt);
        const tx = withSalt ? this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded, encodedSalt) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore old style with salt included
        : this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded);
        return tx.withResultTransform(result => new BlueprintSubmittableResult(result, applyOnEvent(result, ['Instantiated'], ([record]) => new Contract(this.api, this.abi, record.event.data[1], this._decorateMethod))));
      }
    });
    this.codeHash = this.registry.createType('Hash', codeHash);
    this.createContract = createBluePrintWithId(_classPrivateFieldLooseBase(this, _deploy)[_deploy]);
    this.abi.constructors.forEach(c => {
      const messageName = stringCamelCase(c.identifier);

      if (isUndefined(_classPrivateFieldLooseBase(this, _tx)[_tx][messageName])) {
        _classPrivateFieldLooseBase(this, _tx)[_tx][messageName] = createBluePrintTx((o, p) => _classPrivateFieldLooseBase(this, _deploy)[_deploy](c, o, p));
      }
    });
  }

  get tx() {
    return _classPrivateFieldLooseBase(this, _tx)[_tx];
  }

}