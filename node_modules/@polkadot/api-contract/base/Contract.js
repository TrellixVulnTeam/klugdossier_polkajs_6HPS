import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
import BN from 'bn.js';
import { SubmittableResult } from '@polkadot/api';
import { assert, bnToBn, isFunction, isUndefined, logger, stringCamelCase } from '@polkadot/util';
import { map } from '@polkadot/x-rxjs/operators';
import { applyOnEvent, extractOptions, formatData, isOptions } from "../util.js";
import { Base } from "./Base.js"; // As per Rust, 5 * GAS_PER_SEC

const MAX_CALL_GAS = new BN(5000000000000).subn(1);
const ERROR_NO_CALL = 'Your node does not expose the contracts.call RPC. This is most probably due to a runtime configuration.';
const l = logger('Contract');

function createQuery(fn) {
  return (origin, options, ...params) => isOptions(options) ? fn(origin, options, params) : fn(origin, ...extractOptions(options, params));
}

function createTx(fn) {
  return (options, ...params) => isOptions(options) ? fn(options, params) : fn(...extractOptions(options, params));
}

function createWithId(fn, warn) {
  return (messageOrId, options, ...params) => {
    warn && l.warn(warn);
    return isOptions(options) ? fn(messageOrId, options, params) : fn(messageOrId, ...extractOptions(options, params));
  };
}

export class ContractSubmittableResult extends SubmittableResult {
  constructor(result, contractEvents) {
    super(result);
    this.contractEvents = void 0;
    this.contractEvents = contractEvents;
  }

} // map from a JSON result to current-style ContractExecResult

function mapExecResult(registry, json) {
  if (!Object.keys(json).some(key => ['error', 'success'].includes(key))) {
    return registry.createType('ContractExecResult', json);
  }

  const from = registry.createType('ContractExecResultTo260', json);

  if (from.isSuccess) {
    const s = from.asSuccess;
    return registry.createType('ContractExecResult', {
      gasConsumed: s.gasConsumed,
      result: {
        ok: {
          data: s.data,
          flags: s.flags
        }
      }
    });
  } // in the old format error has no additional information,
  // map it as-is with an "unknown" error


  return registry.createType('ContractExecResult', {
    result: {
      err: {
        other: 'unknown'
      }
    }
  });
}

var _query = _classPrivateFieldLooseKey("query");

var _tx = _classPrivateFieldLooseKey("tx");

var _getGas = _classPrivateFieldLooseKey("getGas");

var _exec = _classPrivateFieldLooseKey("exec");

var _read = _classPrivateFieldLooseKey("read");

export class Contract extends Base {
  /**
   * @description The on-chain address for this contract
   */

  /**
   * @deprecated
   * @description Deprecated. Use `.tx.<messageName>` to send a transaction.
   */

  /**
   * @deprecated
   * @description Deprecated. Use `.tx.<messageName>` to send a transaction.
   */
  constructor(api, abi, address, decorateMethod) {
    super(api, abi, decorateMethod);
    this.address = void 0;
    this.exec = void 0;
    this.read = void 0;
    Object.defineProperty(this, _query, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _tx, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _getGas, {
      writable: true,
      value: (_gasLimit, isCall = false) => {
        const gasLimit = bnToBn(_gasLimit);
        return gasLimit.lten(0) ? isCall ? MAX_CALL_GAS : (this.api.consts.system.blockWeights ? this.api.consts.system.blockWeights.maxBlock : this.api.consts.system.maximumBlockWeight).muln(64).divn(100) : gasLimit;
      }
    });
    Object.defineProperty(this, _exec, {
      writable: true,
      value: (messageOrId, {
        gasLimit = 0,
        value = 0
      }, params) => {
        return this.api.tx.contracts.call(this.address, value, _classPrivateFieldLooseBase(this, _getGas)[_getGas](gasLimit), this.abi.findMessage(messageOrId).toU8a(params)).withResultTransform(result => // ContractEmitted is the current generation, ContractExecution is the previous generation
        new ContractSubmittableResult(result, applyOnEvent(result, ['ContractEmitted', 'ContractExecution'], records => records.map(({
          event: {
            data: [, data]
          }
        }) => {
          try {
            return this.abi.decodeEvent(data);
          } catch (error) {
            l.error(`Unable to decode contract event: ${error.message}`);
            return null;
          }
        }).filter(decoded => !!decoded))));
      }
    });
    Object.defineProperty(this, _read, {
      writable: true,
      value: (messageOrId, {
        gasLimit = 0,
        value = 0
      }, params) => {
        assert(this.hasRpcContractsCall, ERROR_NO_CALL);
        const message = this.abi.findMessage(messageOrId);
        return {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          send: this._decorateMethod(origin => this.api.rx.rpc.contracts.call.json({
            dest: this.address,
            gasLimit: _classPrivateFieldLooseBase(this, _getGas)[_getGas](gasLimit, true),
            inputData: message.toU8a(params),
            origin,
            value
          }).pipe(map(json => {
            const {
              debugMessage,
              gasConsumed,
              result
            } = mapExecResult(this.registry, json.toJSON());
            return {
              debugMessage,
              gasConsumed,
              output: result.isOk && message.returnType ? formatData(this.registry, result.asOk.data, message.returnType) : null,
              result
            };
          })))
        };
      }
    });
    this.address = this.registry.createType('AccountId', address);
    this.exec = createWithId(_classPrivateFieldLooseBase(this, _exec)[_exec], '.exec is deprecated, use contract.tx.<messageName>(...) instead (where contract refers to this instance)');
    this.read = createWithId(_classPrivateFieldLooseBase(this, _read)[_read], '.read is deprecated, use contract.query.<messageName>(...) instead (where contract refers to this instance)');
    this.abi.messages.forEach(m => {
      const messageName = stringCamelCase(m.identifier);

      if (isUndefined(_classPrivateFieldLooseBase(this, _tx)[_tx][messageName])) {
        _classPrivateFieldLooseBase(this, _tx)[_tx][messageName] = createTx((o, p) => _classPrivateFieldLooseBase(this, _exec)[_exec](m, o, p));
      }

      if (isUndefined(_classPrivateFieldLooseBase(this, _query)[_query][messageName])) {
        _classPrivateFieldLooseBase(this, _query)[_query][messageName] = createQuery((f, o, p) => _classPrivateFieldLooseBase(this, _read)[_read](m, o, p).send(f));
      }
    });
  }

  get hasRpcContractsCall() {
    var _this$api$rx$rpc$cont;

    return isFunction((_this$api$rx$rpc$cont = this.api.rx.rpc.contracts) === null || _this$api$rx$rpc$cont === void 0 ? void 0 : _this$api$rx$rpc$cont.call);
  }

  get query() {
    assert(this.hasRpcContractsCall, ERROR_NO_CALL);
    return _classPrivateFieldLooseBase(this, _query)[_query];
  }

  get tx() {
    return _classPrivateFieldLooseBase(this, _tx)[_tx];
  }

}