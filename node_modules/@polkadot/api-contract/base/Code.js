import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { SubmittableResult } from '@polkadot/api';
import { assert, compactAddLength, isFunction, isUndefined, isWasm, logger, stringCamelCase, u8aToU8a } from '@polkadot/util';
import { blake2AsU8a } from '@polkadot/util-crypto';
import { applyOnEvent } from "../util.js";
import { Base } from "./Base.js";
import { Blueprint } from "./Blueprint.js";
import { Contract } from "./Contract.js";
import { createBluePrintTx, EMPTY_SALT, encodeSalt } from "./util.js";
const l = logger('Code');
export class CodeSubmittableResult extends SubmittableResult {
  constructor(result, blueprint, contract) {
    super(result);
    this.blueprint = void 0;
    this.contract = void 0;
    this.blueprint = blueprint;
    this.contract = contract;
  }

}

var _tx = _classPrivateFieldLooseKey("tx");

var _instantiate = _classPrivateFieldLooseKey("instantiate");

var _instantiateCurrent = _classPrivateFieldLooseKey("instantiateCurrent");

var _instantiatePrev = _classPrivateFieldLooseKey("instantiatePrev");

var _transformEvents = _classPrivateFieldLooseKey("transformEvents");

export class Code extends Base {
  constructor(api, abi, wasm, decorateMethod) {
    super(api, abi, decorateMethod);
    this.code = void 0;
    Object.defineProperty(this, _tx, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _instantiate, {
      writable: true,
      value: (constructorOrId, options, params) => {
        return isFunction(this.api.tx.contracts.instantiateWithCode) ? _classPrivateFieldLooseBase(this, _instantiateCurrent)[_instantiateCurrent](constructorOrId, options, params) : _classPrivateFieldLooseBase(this, _instantiatePrev)[_instantiatePrev](constructorOrId, options, params);
      }
    });
    Object.defineProperty(this, _instantiateCurrent, {
      writable: true,
      value: (constructorOrId, {
        gasLimit = 0,
        salt,
        value = 0
      }, params) => {
        return this.api.tx.contracts.instantiateWithCode(value, gasLimit, compactAddLength(this.code), this.abi.findConstructor(constructorOrId).toU8a(params), encodeSalt(salt)).withResultTransform(_classPrivateFieldLooseBase(this, _transformEvents)[_transformEvents]);
      }
    });
    Object.defineProperty(this, _instantiatePrev, {
      writable: true,
      value: (constructorOrId, {
        gasLimit = 0,
        salt,
        value = 0
      }, params) => {
        var _this$api$tx$utility;

        assert(isFunction((_this$api$tx$utility = this.api.tx.utility) === null || _this$api$tx$utility === void 0 ? void 0 : _this$api$tx$utility.batch), 'Your chain does not include the utility pallet, for contracts v2 deployment, this is required');
        const encodedSalt = encodeSalt(salt);
        const withSalt = this.api.tx.contracts.instantiate.meta.args.length === 5;
        const encoded = this.abi.findConstructor(constructorOrId).toU8a(params, withSalt ? EMPTY_SALT : encodedSalt);
        const codeHash = blake2AsU8a(this.code);
        return this.api.tx.utility.batch([this.api.tx.contracts.putCode(compactAddLength(this.code)), withSalt ? this.api.tx.contracts.instantiate(value, gasLimit, codeHash, encoded, encodedSalt) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore old style with salt included in the params itself
        : this.api.tx.contracts.instantiate(value, gasLimit, codeHash, encoded)]).withResultTransform(_classPrivateFieldLooseBase(this, _transformEvents)[_transformEvents]);
      }
    });
    Object.defineProperty(this, _transformEvents, {
      writable: true,
      value: result => {
        return new CodeSubmittableResult(result, ...(applyOnEvent(result, ['CodeStored', 'Instantiated'], records => records.reduce(([blueprint, contract], {
          event
        }) => this.api.events.contracts.Instantiated.is(event) ? [blueprint, new Contract(this.api, this.abi, event.data[1], this._decorateMethod)] : this.api.events.contracts.CodeStored.is(event) ? [new Blueprint(this.api, this.abi, event.data[0], this._decorateMethod), contract] : [blueprint, contract], [])) || []));
      }
    });
    this.code = isWasm(this.abi.project.source.wasm) ? this.abi.project.source.wasm : u8aToU8a(wasm);
    assert(isWasm(this.code), 'No WASM code provided');
    this.abi.constructors.forEach(c => {
      const messageName = stringCamelCase(c.identifier);

      if (isUndefined(_classPrivateFieldLooseBase(this, _tx)[_tx][messageName])) {
        _classPrivateFieldLooseBase(this, _tx)[_tx][messageName] = createBluePrintTx((o, p) => _classPrivateFieldLooseBase(this, _instantiate)[_instantiate](c, o, p));
      }
    });
  }

  get tx() {
    return _classPrivateFieldLooseBase(this, _tx)[_tx];
  }
  /**
   * @description Deploy the code bundle and the contract, creating a Blueprint.
   * @deprecated Use the `code.tx.<constructor>(...) format to put code and deploy
   */


  createContract(constructorOrId, options, params) {
    l.warn('.createContract is deprecated, use code.tx.<constructorName>(...) instead (where code refers to this instance)');
    return _classPrivateFieldLooseBase(this, _instantiate)[_instantiate](constructorOrId, options, params);
  }

}