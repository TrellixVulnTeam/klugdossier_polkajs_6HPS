import type { SubmittableExtrinsic } from '@polkadot/api/submittable/types';
import type { ApiTypes, DecorateMethod } from '@polkadot/api/types';
import type { Hash } from '@polkadot/types/interfaces';
import type { AnyJson, ISubmittableResult } from '@polkadot/types/types';
import type { BlueprintOptions } from '../types';
import type { ContractGeneric, MapConstructorExec } from './types';
import { SubmittableResult } from '@polkadot/api';
import { ApiBase } from '@polkadot/api/base';
import { Abi } from '../Abi';
import { Base } from './Base';
import { Contract } from './Contract';
export declare class BlueprintSubmittableResult<ApiType extends ApiTypes> extends SubmittableResult {
    readonly contract?: Contract<ApiType>;
    constructor(result: ISubmittableResult, contract?: Contract<ApiType>);
}
export declare class Blueprint<ApiType extends ApiTypes> extends Base<ApiType> {
    #private;
    /**
     * @description The on-chain code hash for this blueprint
     */
    readonly codeHash: Hash;
    /**
     * @deprecated
     * @description Deprecated. Use `.tx.<constructorName>`. Creates a contract in a non-deterministic way.
     */
    readonly createContract: ContractGeneric<BlueprintOptions, SubmittableExtrinsic<ApiType, BlueprintSubmittableResult<ApiType>>>;
    constructor(api: ApiBase<ApiType>, abi: AnyJson | Abi, codeHash: string | Hash | Uint8Array, decorateMethod: DecorateMethod<ApiType>);
    get tx(): MapConstructorExec<ApiType>;
}
