import type { SubmittableResult } from '@polkadot/api';
import type { Raw } from '@polkadot/types';
import type { EventRecord } from '@polkadot/types/interfaces';
import type { Codec, CodecArg, Registry, TypeDef } from '@polkadot/types/types';
import type { BlueprintOptions, ContractOptions } from './types';
import BN from 'bn.js';
declare type ContractEvents = 'CodeStored' | 'ContractEmitted' | 'ContractExecution' | 'Instantiated';
declare type TOptions = BlueprintOptions | ContractOptions;
export declare function formatData(registry: Registry, data: Raw, { type }: TypeDef): Codec;
export declare function applyOnEvent<T>(result: SubmittableResult, types: ContractEvents[], fn: (records: EventRecord[]) => T): T | undefined;
export declare function isOptions<T>(options: BigInt | string | number | BN | T): options is T;
export declare function extractOptions<T extends TOptions>(value: BigInt | string | number | BN, params: CodecArg[]): [T, CodecArg[]];
export {};
