"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QrScanAddress = void 0;

var _react = _interopRequireWildcard(require("react"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _constants = require("./constants.cjs");

var _Scan = require("./Scan.cjs");

var _jsxRuntime = require("react/jsx-runtime");

// Copyright 2017-2021 @polkadot/react-qr authors & contributors
// SPDX-License-Identifier: Apache-2.0
function ScanAddress({
  className,
  onError,
  onScan,
  size,
  style
}) {
  const _onScan = (0, _react.useCallback)(data => {
    if (data) {
      try {
        const [prefix, content, genesisHash, ...name] = data.split(':');
        const isValidPrefix = prefix === _constants.ADDRESS_PREFIX || prefix === _constants.SEED_PREFIX;
        (0, _util.assert)(isValidPrefix, `Invalid prefix received, expected '${_constants.ADDRESS_PREFIX}/${_constants.SEED_PREFIX}' , found '${prefix}'`);
        const isAddress = prefix === _constants.ADDRESS_PREFIX;

        if (isAddress) {
          (0, _utilCrypto.decodeAddress)(content);
        }

        onScan({
          content,
          genesisHash,
          isAddress,
          name: name !== null && name !== void 0 && name.length ? name.join(':') : undefined
        });
      } catch (error) {
        console.error('@polkadot/react-qr:QrScanAddress', error.message, data);
      }
    }
  }, [onScan]);

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Scan.QrScan, {
    className: className,
    onError: onError,
    onScan: _onScan,
    size: size,
    style: style
  });
}

const QrScanAddress = /*#__PURE__*/_react.default.memo(ScanAddress);

exports.QrScanAddress = QrScanAddress;